using VectorStudyCase.src;
using NUnit.Framework;
using System.Diagnostics;
using VectorStudyCase.src.Features;
using VectorStudyCase.src.Interfaces;
using VectorStudyCase.VectorStringSearch.Interfaces;
using VectorStudyCase.VectorStringSearch.Features;

namespace TestProject
{
    public class Tests
    {

        //specify type of data that is used by my search engine
        public ISearchEngine<string> MySearchEngine { get; private set; }

        //specify which type of data i will traverse
        public List<ISearchStructure<string>> MyInputList { get; private set; }

        public List<ISearchStructure<string>> AutogeneratedInoutTestList { get; private set; }

        private Stopwatch? _stopWatch;

        [SetUp]
        public void Setup()
        {

            MySearchEngine = new StringSearchEngine();

            //specify and fill with concrete stringsearchedstructure elements in list
            MyInputList = new List<ISearchStructure<string>> { new StringSearchStructure("AAAA"), new StringSearchStructure("ACZM"), new StringSearchStructure("ANDY"), new StringSearchStructure("AAAA"), new StringSearchStructure("ACZM"), new StringSearchStructure("ANDY") };


            AutogeneratedInoutTestList = new List<ISearchStructure<string>>();
            for (char firstLetter = 'A'; firstLetter <= 'Z'; firstLetter++)
            {
                for (char secondLetter = 'A'; secondLetter <= 'Z'; secondLetter++)
                {
                    for (char thirdLetter = 'A'; thirdLetter <= 'Z'; thirdLetter++)
                    {
                        for (char fourthLetter = 'A'; fourthLetter <= 'Z'; fourthLetter++)
                        {
                            string combination = $"{firstLetter}{secondLetter}{thirdLetter}{fourthLetter}";
                            AutogeneratedInoutTestList.Add(new StringSearchStructure(combination));
                        }
                    }
                }
            }
        }

        [Test]
        public void Test1()
        {
            var testResults = MySearchEngine.SearchForPattern(MyInputList, new StringSearchStructure("AN"));
            testResults.ForEach(x => Console.WriteLine(x));
            Assert.IsTrue(testResults.Count == 2 && testResults.Contains("ANDY"));
        }

        [Test]
        public void Test2()
        {
            _stopWatch = Stopwatch.StartNew();
            var ReturnData = MySearchEngine.SearchForPattern(MyInputList, new StringSearchStructure("AN"));
            _stopWatch.Stop();

            ReturnData.ForEach(x => Console.WriteLine(x));

            Console.WriteLine($"elapsed time iin microseconds taken here is {_stopWatch.ElapsedTicks / 10.0}");

            Assert.IsTrue(ReturnData.Count == 2 && ReturnData.Contains("ANDY"));
        }

        [Test]
        public void Test3()
        {
            _stopWatch = Stopwatch.StartNew();
            var ReturnData = MySearchEngine.SearchForPattern(MyInputList, new StringSearchStructure("MH"));
            _stopWatch.Stop();
            ReturnData.ForEach(x => Console.WriteLine(x));

            Console.WriteLine($"elapsed time iin microseconds taken here is {_stopWatch.ElapsedTicks / 10.0}");

            Assert.IsFalse(ReturnData.Count == 2 && ReturnData.Contains("ANDY"));
        }

        [Test]
        public void Test4()
        {
            MyInputList = new();
            _stopWatch = Stopwatch.StartNew();
            var ReturnData = MySearchEngine.SearchForPattern(MyInputList, new StringSearchStructure("MH"));
            _stopWatch.Stop();
            ReturnData.ForEach(x => Console.WriteLine(x));

            Console.WriteLine($"elapsed time iin microseconds taken here is {_stopWatch.ElapsedTicks / 10.0}");

            Assert.IsFalse(ReturnData.Count == 2 && ReturnData.Contains("ANDY"));
        }


        [Test]
        public void Test5()
        {
            Random random = new Random();
            int randomIndex = random.Next(0, AutogeneratedInoutTestList.Count);
            var randomElement = AutogeneratedInoutTestList[randomIndex];

            _stopWatch = Stopwatch.StartNew();
            var testResults = MySearchEngine.SearchForPattern(AutogeneratedInoutTestList, randomElement);
            _stopWatch.Stop();

            testResults.ForEach(x => Console.WriteLine(x));
            Console.WriteLine($"elapsed time iin microseconds taken here is {_stopWatch.ElapsedTicks / 10.0}");

            Assert.IsTrue(testResults.Count == 1 && testResults.Contains(randomElement.Data!));

        }


    }
}